# predict_output
predict_output <- argmax(predict_output, FALSE)
# train_x[5]
train_y[5]
logits_to_text(predict_output, y_tk, predict = TRUE)
plot_deepviz(model_RNN)
plot_model(model_RNN)
library(keras)
library(tensorflow)
library(tokenizers)
library(dplyr)
library(png)
library(reticulate)
library(abind)
library(ramify)
library(stringr)
library(deepviz)
language <- "French"
language_code <- "fr"
file_name <- paste0("translation_", language_code, ".csv")
train <- read.csv(file_name, encoding="UTF-8", stringsAsFactors=FALSE)
colnames(train) <- c("English", language)
train
tokenize <- function(x){
tokenizer <- text_tokenizer(num_words = 1000000)
fit_text_tokenizer(tokenizer, x)
sequences <- texts_to_sequences(tokenizer, x)
return(c(sequences, tokenizer))
}
pad <- function(x, length=NULL){
return(pad_sequences(x, maxlen = length, padding = 'post'))
}
text_sentences = c('The quick brown fox jumps over the lazy dog .',
'By Jove , my quick study of lexicography won a prize .',
'This is a short sentence .')
token_index <- length(text_sentences) + 1
output <- tokenize(text_sentences)
text_tokenized <- output[1:length(text_sentences)]
# print(output)
# Finding out the integer allocation to each word
tk <- output[[token_index]]$word_index
# print(tk)
# print(length(tk))
# print(table(tk))
for(i in 1:length(text_sentences)){
print(paste0("Sequence in Text ", i, ":"))
print(paste0("Input: ", text_sentences[i]))
print(paste0("Output: ", list(text_tokenized[[i]])))
cat("\n")
}
padded_text <- pad(text_tokenized)
for(i in 1:length(text_sentences)){
print(paste0("Sequence in Text ", i, ":"))
print(paste0("Input: ", text_sentences[i]))
print(paste0("Output: ", list(text_tokenized[[i]])))
print(paste0("Output (Padded): ", list(padded_text[i,])))
}
# n <- nrow(subset_train)
n <- 5
word_list <- list(train[, 1])[[1]][1:n]
# word_list
new_output <- tokenize(word_list)
new_text_tokenized <- new_output[1:n]
new_padded_text <- pad(new_text_tokenized)
for(i in 1:n){
# if(i %% 100 != 0) next
print(paste0("Sequence in Text ", i, ":"))
print(paste0("Input: ", word_list[i]))
print(paste0("Output: ", list(new_text_tokenized[[i]])))
print(paste0("Output (Padded): ", list(new_padded_text[i,])))
# cat("\n")
}
# n <- nrow(subset_train)
n <- 5
word_list <- list(train[, 2])[[1]][1:n]
new_output <- tokenize(word_list)
new_text_tokenized <- new_output[1:n]
new_padded_text <- pad(new_text_tokenized)
for(i in 1:n){
# if(i %% 100 != 0) next
print(paste0("Sequence in Text ", i, ":"))
print(paste0("Input: ", word_list[i]))
print(paste0("Output: ", list(new_text_tokenized[[i]])))
print(paste0("Output (Padded): ", list(new_padded_text[i,])))
}
preprocess_text <- function(x, y){
output_x <- tokenize(x)
output_y <- tokenize(y)
preprocess_x <- output_x[1:length(x)]; x_tk <- output_x[[length(x) + 1]]$word_index
preprocess_y <- output_y[1:length(y)]; y_tk <- output_y[[length(y) + 1]]$word_index
# print(preprocess_x)
preprocess_x <- pad(preprocess_x)
preprocess_y <- pad(preprocess_y)
# print(preprocess_x)
# Converting from a 2D matrix to a 3D tensor
# preprocess_x <- array(preprocess_x[[1]], c(dim(preprocess_x[[1]])[1], dim(preprocess_x[[1]])[2], 1))
# preprocess_y <- array(preprocess_y[[1]], c(dim(preprocess_y[[1]])[1], dim(preprocess_y[[1]])[2], 1))
return(list(preprocess_x, preprocess_y, x_tk, y_tk))
}
train_x <- list(train[, 1])[[1]]
train_y <- list(train[, 2])[[1]]
# print(subset_train_x)
process_output <- preprocess_text(train_x, train_y)
# print(process_output[4],)
preprocess_x <- process_output[1]; preprocess_y <- process_output[2]; x_tk <- process_output[3]; y_tk <- process_output[4]
# print(preprocess_x[[1]])
# print(preprocess_y[[1]])
# Conversion back to list of words from tokenized word list
# attributes(x_tk[[1]])$names
# length(y_tk[[1]])
col_x <- dim(preprocess_x[[1]])[2]
col_y <- dim(preprocess_y[[1]])[2]
if(col_x >= col_y){
max_col <- col_x
}else{
max_col <- col_y
}
tmp_x <- pad(preprocess_x[[1]], max_col)
tmp_y <- pad(preprocess_y[[1]], max_col)
calculate_sparsity <- function(df_matrix){
zero_count <- 0
total_count <- nrow(df_matrix) * ncol(tmp_x)
for(i in 1:nrow(df_matrix)){
for(j in 1:ncol(df_matrix)){
if(df_matrix[i, j] == 0){
zero_count = zero_count + 1
}
}
}
zero_count/total_count
}
print(paste("The Sparsity of the matrix is: ", round(calculate_sparsity(tmp_x)*100, 2), "%"))
convert2tensor <- function(preprocess_data){
preprocess_data <- array(preprocess_data, c(dim(preprocess_data)[1], dim(preprocess_data)[2], 1))
return(preprocess_data)
}
# array(preprocess_x[[1]], c(dim(preprocess_x[[1]])[1], dim(preprocess_x[[1]])[2], 1))
# dim(array(preprocess_x[[1]], c(dim(preprocess_x[[1]])[1], dim(preprocess_x[[1]])[2], 1)))[2:3]
tensor_x <- convert2tensor(tmp_x)
dim(tensor_x)
tensor_x[1, , ]
tensor_y <- convert2tensor(tmp_y)
# tensor_y
logits_to_text <- function(logits, tokenizer, predict=FALSE){
tokenizer_words <- attributes(tokenizer[[1]])$names
text <- c()
if(predict == TRUE){
logits <- logits - 1 ## For prediction conversion only
}
for(i in logits){
if(i == 0){
text <- c(text, "<PAD>")
}else{
text <- c(text, tokenizer_words[i])
}
}
return(text)
}
# Testing to convert the first row back to text
# preprocess_x[[1]][1, ]
# preprocess_x[[1]]
logits_to_text(preprocess_x[[1]][1, ], x_tk)
# dim(tensor_y)
model_RNN <-  keras_model_sequential()
model_RNN %>%
layer_simple_rnn(units = 256, input_shape = dim(tensor_x)[2:3], return_sequences = TRUE) %>%
layer_dense(units = 1024, activation = 'relu')%>%
layer_dropout(rate = 0.5) %>%
layer_dense(units = length(y_tk[[1]]) + 1, activation = 'softmax')
model_RNN %>% summary()
model_RNN %>% compile(
loss      = 'sparse_categorical_crossentropy',
# optimizer = optimizer_rmsprop(),
optimizer = optimizer_adam(learning_rate = 0.005),
metrics=c('accuracy')
)
plot_model(model_RNN)
history = model_RNN %>% fit(
x = tensor_x, y = tensor_y,
epochs           = 10,
batch_size = 1024,
validation_split = 0.2,
)
plot(history)
predict_output <- model_RNN %>% predict(matrix(tensor_x[5, ,], nrow=1))
# predict_output
predict_output <- argmax(predict_output, FALSE)
# train_x[5]
train_y[5]
logits_to_text(predict_output, y_tk, predict = TRUE)
pred_translation <- function(i){
predict_output <- model_RNN %>% predict(matrix(tensor_x[i, ,], nrow=1))
predict_output <- argmax(predict_output, FALSE)
converted_text <- logits_to_text(predict_output, y_tk, predict = TRUE)
converted_text[converted_text == "<PAD>"] <- ""
converted_text <- trimws(paste(converted_text, collapse = " "))
print(paste("Input sentence:", train_x[i]))
print(paste("Intended Output Sentence:", train_y[i]))
print(paste("Predicted Output Sentence:", converted_text))
}
## `i` represents the index within the training set.
pred_translation(5)
library(keras)
library(tensorflow)
library(tokenizers)
library(dplyr)
# library(png)
library(reticulate)
# library(abind)
library(ramify)
library(stringr)
library(deepviz)
language <- "French"
language_code <- "fr"
file_name <- paste0("translation_", language_code, ".csv")
train <- read.csv(file_name, encoding="UTF-8", stringsAsFactors=FALSE)
colnames(train) <- c("English", language)
train
tokenize <- function(x){
tokenizer <- text_tokenizer(num_words = 1000000)
fit_text_tokenizer(tokenizer, x)
sequences <- texts_to_sequences(tokenizer, x)
return(c(sequences, tokenizer))
}
pad <- function(x, length=NULL){
return(pad_sequences(x, maxlen = length, padding = 'post'))
}
text_sentences = c('The quick brown fox jumps over the lazy dog .',
'By Jove , my quick study of lexicography won a prize .',
'This is a short sentence .')
token_index <- length(text_sentences) + 1
output <- tokenize(text_sentences)
text_tokenized <- output[1:length(text_sentences)]
# print(output)
# Finding out the integer allocation to each word
tk <- output[[token_index]]$word_index
# print(tk)
# print(length(tk))
# print(table(tk))
for(i in 1:length(text_sentences)){
print(paste0("Sequence in Text ", i, ":"))
print(paste0("Input: ", text_sentences[i]))
print(paste0("Output: ", list(text_tokenized[[i]])))
cat("\n")
}
padded_text <- pad(text_tokenized)
for(i in 1:length(text_sentences)){
print(paste0("Sequence in Text ", i, ":"))
print(paste0("Input: ", text_sentences[i]))
print(paste0("Output: ", list(text_tokenized[[i]])))
print(paste0("Output (Padded): ", list(padded_text[i,])))
}
# n <- nrow(subset_train)
n <- 5
word_list <- list(train[, 1])[[1]][1:n]
# word_list
new_output <- tokenize(word_list)
new_text_tokenized <- new_output[1:n]
new_padded_text <- pad(new_text_tokenized)
for(i in 1:n){
# if(i %% 100 != 0) next
print(paste0("Sequence in Text ", i, ":"))
print(paste0("Input: ", word_list[i]))
print(paste0("Output: ", list(new_text_tokenized[[i]])))
print(paste0("Output (Padded): ", list(new_padded_text[i,])))
# cat("\n")
}
# n <- nrow(subset_train)
n <- 5
word_list <- list(train[, 2])[[1]][1:n]
new_output <- tokenize(word_list)
new_text_tokenized <- new_output[1:n]
new_padded_text <- pad(new_text_tokenized)
for(i in 1:n){
# if(i %% 100 != 0) next
print(paste0("Sequence in Text ", i, ":"))
print(paste0("Input: ", word_list[i]))
print(paste0("Output: ", list(new_text_tokenized[[i]])))
print(paste0("Output (Padded): ", list(new_padded_text[i,])))
}
preprocess_text <- function(x, y){
output_x <- tokenize(x)
output_y <- tokenize(y)
preprocess_x <- output_x[1:length(x)]; x_tk <- output_x[[length(x) + 1]]$word_index
preprocess_y <- output_y[1:length(y)]; y_tk <- output_y[[length(y) + 1]]$word_index
# print(preprocess_x)
preprocess_x <- pad(preprocess_x)
preprocess_y <- pad(preprocess_y)
# print(preprocess_x)
# Converting from a 2D matrix to a 3D tensor
# preprocess_x <- array(preprocess_x[[1]], c(dim(preprocess_x[[1]])[1], dim(preprocess_x[[1]])[2], 1))
# preprocess_y <- array(preprocess_y[[1]], c(dim(preprocess_y[[1]])[1], dim(preprocess_y[[1]])[2], 1))
return(list(preprocess_x, preprocess_y, x_tk, y_tk))
}
train_x <- list(train[, 1])[[1]]
train_y <- list(train[, 2])[[1]]
# print(subset_train_x)
process_output <- preprocess_text(train_x, train_y)
# print(process_output[4],)
preprocess_x <- process_output[1]; preprocess_y <- process_output[2]; x_tk <- process_output[3]; y_tk <- process_output[4]
# print(preprocess_x[[1]])
# print(preprocess_y[[1]])
# Conversion back to list of words from tokenized word list
# attributes(x_tk[[1]])$names
# length(y_tk[[1]])
col_x <- dim(preprocess_x[[1]])[2]
col_y <- dim(preprocess_y[[1]])[2]
if(col_x >= col_y){
max_col <- col_x
}else{
max_col <- col_y
}
tmp_x <- pad(preprocess_x[[1]], max_col)
tmp_y <- pad(preprocess_y[[1]], max_col)
calculate_sparsity <- function(df_matrix){
zero_count <- 0
total_count <- nrow(df_matrix) * ncol(tmp_x)
for(i in 1:nrow(df_matrix)){
for(j in 1:ncol(df_matrix)){
if(df_matrix[i, j] == 0){
zero_count = zero_count + 1
}
}
}
zero_count/total_count
}
print(paste("The Sparsity of the matrix is: ", round(calculate_sparsity(tmp_x)*100, 2), "%"))
convert2tensor <- function(preprocess_data){
preprocess_data <- array(preprocess_data, c(dim(preprocess_data)[1], dim(preprocess_data)[2], 1))
return(preprocess_data)
}
# array(preprocess_x[[1]], c(dim(preprocess_x[[1]])[1], dim(preprocess_x[[1]])[2], 1))
# dim(array(preprocess_x[[1]], c(dim(preprocess_x[[1]])[1], dim(preprocess_x[[1]])[2], 1)))[2:3]
tensor_x <- convert2tensor(tmp_x)
dim(tensor_x)
tensor_x[1, , ]
tensor_y <- convert2tensor(tmp_y)
# tensor_y
logits_to_text <- function(logits, tokenizer, predict=FALSE){
tokenizer_words <- attributes(tokenizer[[1]])$names
text <- c()
if(predict == TRUE){
logits <- logits - 1 ## For prediction conversion only
}
for(i in logits){
if(i == 0){
text <- c(text, "<PAD>")
}else{
text <- c(text, tokenizer_words[i])
}
}
return(text)
}
# Testing to convert the first row back to text
# preprocess_x[[1]][1, ]
# preprocess_x[[1]]
logits_to_text(preprocess_x[[1]][1, ], x_tk)
library(keras)
library(tensorflow)
library(tokenizers)
library(dplyr)
# library(png)
library(reticulate)
# library(abind)
library(ramify)
library(stringr)
library(deepviz)
language <- "French"
language_code <- "fr"
file_name <- paste0("translation_", language_code, ".csv")
train <- read.csv(file_name, encoding="UTF-8", stringsAsFactors=FALSE)
colnames(train) <- c("English", language)
train
tokenize <- function(x){
tokenizer <- text_tokenizer(num_words = 1000000)
fit_text_tokenizer(tokenizer, x)
sequences <- texts_to_sequences(tokenizer, x)
return(c(sequences, tokenizer))
}
pad <- function(x, length=NULL){
return(pad_sequences(x, maxlen = length, padding = 'post'))
}
text_sentences = c('The quick brown fox jumps over the lazy dog .',
'By Jove , my quick study of lexicography won a prize .',
'This is a short sentence .')
token_index <- length(text_sentences) + 1
output <- tokenize(text_sentences)
text_tokenized <- output[1:length(text_sentences)]
# print(output)
# Finding out the integer allocation to each word
tk <- output[[token_index]]$word_index
# print(tk)
# print(length(tk))
# print(table(tk))
for(i in 1:length(text_sentences)){
print(paste0("Sequence in Text ", i, ":"))
print(paste0("Input: ", text_sentences[i]))
print(paste0("Output: ", list(text_tokenized[[i]])))
cat("\n")
}
padded_text <- pad(text_tokenized)
for(i in 1:length(text_sentences)){
print(paste0("Sequence in Text ", i, ":"))
print(paste0("Input: ", text_sentences[i]))
print(paste0("Output: ", list(text_tokenized[[i]])))
print(paste0("Output (Padded): ", list(padded_text[i,])))
}
# n <- nrow(subset_train)
n <- 5
word_list <- list(train[, 1])[[1]][1:n]
# word_list
new_output <- tokenize(word_list)
new_text_tokenized <- new_output[1:n]
new_padded_text <- pad(new_text_tokenized)
for(i in 1:n){
# if(i %% 100 != 0) next
print(paste0("Sequence in Text ", i, ":"))
print(paste0("Input: ", word_list[i]))
print(paste0("Output: ", list(new_text_tokenized[[i]])))
print(paste0("Output (Padded): ", list(new_padded_text[i,])))
# cat("\n")
}
# n <- nrow(subset_train)
n <- 5
word_list <- list(train[, 2])[[1]][1:n]
new_output <- tokenize(word_list)
new_text_tokenized <- new_output[1:n]
new_padded_text <- pad(new_text_tokenized)
for(i in 1:n){
# if(i %% 100 != 0) next
print(paste0("Sequence in Text ", i, ":"))
print(paste0("Input: ", word_list[i]))
print(paste0("Output: ", list(new_text_tokenized[[i]])))
print(paste0("Output (Padded): ", list(new_padded_text[i,])))
}
preprocess_text <- function(x, y){
output_x <- tokenize(x)
output_y <- tokenize(y)
preprocess_x <- output_x[1:length(x)]; x_tk <- output_x[[length(x) + 1]]$word_index
preprocess_y <- output_y[1:length(y)]; y_tk <- output_y[[length(y) + 1]]$word_index
# print(preprocess_x)
preprocess_x <- pad(preprocess_x)
preprocess_y <- pad(preprocess_y)
# print(preprocess_x)
# Converting from a 2D matrix to a 3D tensor
# preprocess_x <- array(preprocess_x[[1]], c(dim(preprocess_x[[1]])[1], dim(preprocess_x[[1]])[2], 1))
# preprocess_y <- array(preprocess_y[[1]], c(dim(preprocess_y[[1]])[1], dim(preprocess_y[[1]])[2], 1))
return(list(preprocess_x, preprocess_y, x_tk, y_tk))
}
train_x <- list(train[, 1])[[1]]
train_y <- list(train[, 2])[[1]]
# print(subset_train_x)
process_output <- preprocess_text(train_x, train_y)
# print(process_output[4],)
preprocess_x <- process_output[1]; preprocess_y <- process_output[2]; x_tk <- process_output[3]; y_tk <- process_output[4]
# print(preprocess_x[[1]])
# print(preprocess_y[[1]])
# Conversion back to list of words from tokenized word list
# attributes(x_tk[[1]])$names
# length(y_tk[[1]])
col_x <- dim(preprocess_x[[1]])[2]
col_y <- dim(preprocess_y[[1]])[2]
if(col_x >= col_y){
max_col <- col_x
}else{
max_col <- col_y
}
tmp_x <- pad(preprocess_x[[1]], max_col)
tmp_y <- pad(preprocess_y[[1]], max_col)
calculate_sparsity <- function(df_matrix){
zero_count <- 0
total_count <- nrow(df_matrix) * ncol(tmp_x)
for(i in 1:nrow(df_matrix)){
for(j in 1:ncol(df_matrix)){
if(df_matrix[i, j] == 0){
zero_count = zero_count + 1
}
}
}
zero_count/total_count
}
print(paste("The Sparsity of the matrix is: ", round(calculate_sparsity(tmp_x)*100, 2), "%"))
convert2tensor <- function(preprocess_data){
preprocess_data <- array(preprocess_data, c(dim(preprocess_data)[1], dim(preprocess_data)[2], 1))
return(preprocess_data)
}
# array(preprocess_x[[1]], c(dim(preprocess_x[[1]])[1], dim(preprocess_x[[1]])[2], 1))
# dim(array(preprocess_x[[1]], c(dim(preprocess_x[[1]])[1], dim(preprocess_x[[1]])[2], 1)))[2:3]
tensor_x <- convert2tensor(tmp_x)
dim(tensor_x)
tensor_x[1, , ]
tensor_y <- convert2tensor(tmp_y)
# tensor_y
logits_to_text <- function(logits, tokenizer, predict=FALSE){
tokenizer_words <- attributes(tokenizer[[1]])$names
text <- c()
if(predict == TRUE){
logits <- logits - 1 ## For prediction conversion only
}
for(i in logits){
if(i == 0){
text <- c(text, "<PAD>")
}else{
text <- c(text, tokenizer_words[i])
}
}
return(text)
}
# Testing to convert the first row back to text
# preprocess_x[[1]][1, ]
# preprocess_x[[1]]
logits_to_text(preprocess_x[[1]][1, ], x_tk)
