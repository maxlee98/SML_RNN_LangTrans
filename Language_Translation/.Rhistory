print(paste0("Input: ", text_sentences[i]))
print(paste0("Output: ", list(text_tokenized[[i]])))
}
# padded_text <- pad(text_tokenized)
# for(i in 1:length(text_sentences)){
#   print(paste0("Sequence in Text ", i, ":"))
#   print(paste0("Input: ", text_sentences[i]))
#   print(paste0("Output: ", list(text_tokenized[[i]])))
#   print(paste0("Output (Padded): ", list(padded_text[i,])))
# }
n <- nrow(subset_train)
word_list <- list(subset_train[, 1])[[1]][1:n]
# word_list
new_output <- tokenize(word_list)
new_text_tokenized <- new_output[1:n]
new_padded_text <- pad(new_text_tokenized)
for(i in 1:n){
if(i %% 100 != 0) next
print(paste0("Sequence in Text ", i, ":"))
print(paste0("Input: ", word_list[i]))
print(paste0("Output: ", list(new_text_tokenized[[i]])))
print(paste0("Output (Padded): ", list(new_padded_text[i,])))
}
n <- nrow(subset_train)
word_list <- list(subset_train[, 2])[[1]][1:n]
new_output <- tokenize(word_list)
new_text_tokenized <- new_output[1:n]
new_padded_text <- pad(new_text_tokenized)
for(i in 1:n){
if(i %% 100 != 0) next
print(paste0("Sequence in Text ", i, ":"))
print(paste0("Input: ", word_list[i]))
print(paste0("Output: ", list(new_text_tokenized[[i]])))
print(paste0("Output (Padded): ", list(new_padded_text[i,])))
}
preprocess_text <- function(x, y){
output_x <- tokenize(x)
output_y <- tokenize(y)
preprocess_x <- output_x[1:length(x)]; x_tk <- output_x[[length(x) + 1]]$word_index
preprocess_y <- output_y[1:length(y)]; y_tk <- output_y[[length(y) + 1]]$word_index
# print(preprocess_x)
preprocess_x <- pad(preprocess_x)
preprocess_y <- pad(preprocess_y)
# print(preprocess_x)
# Converting from a 2D matrix to a 3D tensor
# preprocess_x <- array(preprocess_x[[1]], c(dim(preprocess_x[[1]])[1], dim(preprocess_x[[1]])[2], 1))
# preprocess_y <- array(preprocess_y[[1]], c(dim(preprocess_y[[1]])[1], dim(preprocess_y[[1]])[2], 1))
return(list(preprocess_x, preprocess_y, x_tk, y_tk))
}
n <- nrow(subset_train) #1000
subset_train_x <- list(subset_train[, 1])[[1]][1:n]
subset_train_y <- list(subset_train[, 2])[[1]][1:n]
# print(subset_train_x)
process_output <- preprocess_text(subset_train_x, subset_train_y)
# print(process_output[4],)
preprocess_x <- process_output[1]; preprocess_y <- process_output[2]; x_tk <- process_output[3]; y_tk <- process_output[4]
# print(preprocess_x[[1]])
# print(preprocess_y[[1]])
# Conversion back to list of words from tokenized word list
# attributes(x_tk[[1]])$names
# length(y_tk[[1]])
col_x <- dim(preprocess_x[[1]])[2]
col_y <- dim(preprocess_y[[1]])[2]
if(col_x >= col_y){
max_col <- col_x
}else{
max_col <- col_y
}
tmp_x <- pad(preprocess_x[[1]], max_col)
tmp_y <- pad(preprocess_y[[1]], max_col)
row <- 5
head(tmp_x)
subset_train_x[row]
# x_tk[[1]]$jump
calculate_sparsity <- function(df_matrix){
zero_count <- 0
total_count <- nrow(df_matrix) * ncol(tmp_x)
for(i in 1:nrow(df_matrix)){
for(j in 1:ncol(df_matrix)){
if(df_matrix[i, j] == 0){
zero_count = zero_count + 1
}
}
}
zero_count/total_count
}
calculate_sparsity(tmp_x)
# Include your libraries here:
library(ggplot2)
library(tidymodels)
library(tidyr)
library(kernlab) # for svm functions
tidymodels_prefer()
source("classification_report.R") # function cr()
get2DIrisData <- function(){
# Get the iris data and project it down to two dimensions (for visualization)
newiris <- iris
# Convert the factor variable to integer
newiris$Species <- as.integer(unclass(newiris$Species))
# Convert the data frame to a matrix
irismatrix <- as.matrix(newiris)
# Remove the dimension names
dimnames(irismatrix) <- NULL
# Scale the data
features <- scale(irismatrix[,1:4])
# Append the labels column
irismatrix <- cbind(features,irismatrix[,5])
rowcount <- nrow(irismatrix)
set.seed(392) # So sample() always returns the same result (choose your own seed)
# We want an equal number of observations of each species in the training set
# We take advantage of the fact that there are exactly 50 flowers in each species
speciescount <- 50
speciestraincount <- round(speciescount*.8)
trainrows = unlist(map(1:3,function(speciesindex){
speciescount*(speciesindex-1)+
sort(sample(speciescount,speciestraincount))}))
trainset <- irismatrix[trainrows,]
testset <- irismatrix[-trainrows,]
numfeatures <- 4
x_trainset <- trainset[,1:numfeatures]
x_testset <- testset[,1:numfeatures]
pc <- prcomp(x_trainset,center=TRUE,scale.=FALSE,rank.=2)
rotationmatrix <- pc$rotation
traindata <- as.data.frame(pc$x)
# restore species names
speciesNames <- levels(iris$Species)
traindata$y <- speciesNames[trainset[,5]]
# Apply rotation to testset
testdata <- as.data.frame(x_testset %*% rotationmatrix)
testdata$y <- speciesNames[testset[,5]]
alldata <- list(traindata=traindata,testdata=testdata)
alldata
}
alldata <- get2DIrisData()
traindata <- alldata$traindata
testdata <- alldata$testdata
# Convert the outcome variable to a factor
traindata$y <- factor(traindata$y)
testdata$y <- factor(testdata$y)
head(traindata)
svm_rbf_model <- svm_rbf(cost = tune()) %>%
set_mode("classification") %>%
set_engine("kernlab")
set.seed(55) # For repeatability
# Call vfold_cv() on the training set and request 10 folds
iris_folds <- vfold_cv(traindata, 10)
# Examine the result
#iris_folds
# Define a grid for the parameter search space.
# We create our own grid:
# a data frame with a column for each parameter (only one in this case)
costrange <- c(0.5,10)
costspan <- costrange[2]-costrange[1]
n <- 20
paramgrid <- as.data.frame(list(cost=(1:n)/n*costspan+costrange[1]))
# Remove earlier versions of the workflow, if any
rm(svm_wflow,tuned_wflow)
# Set up a workflow
svm_wflow <-
workflow() %>%  # This creates a workflow object
add_model(svm_rbf_model) # Every workflow must have a model
# There is no pre-processing required so the recipe just identifies the outcome variable
iris_recipe <- recipe(y ~ .,data=traindata)
# Add the recipe
svm_wflow <- svm_wflow %>% add_recipe(iris_recipe)
# Run model over the search grid
tuned_wflow <-  tune_grid(svm_wflow,
resamples=iris_folds,
grid=paramgrid)
# The autoplot() function creates a nice ggplot
autoplot(tuned_wflow) + theme(legend.position = "top")
# Include your libraries here:
library(ggplot2)
library(tidymodels)
library(tidyr)
library(kernlab) # for svm functions
tidymodels_prefer()
source("classification_report.R") # function cr()
get2DIrisData <- function(){
# Get the iris data and project it down to two dimensions (for visualization)
newiris <- iris
# Convert the factor variable to integer
newiris$Species <- as.integer(unclass(newiris$Species))
# Convert the data frame to a matrix
irismatrix <- as.matrix(newiris)
# Remove the dimension names
dimnames(irismatrix) <- NULL
# Scale the data
features <- scale(irismatrix[,1:4])
# Append the labels column
irismatrix <- cbind(features,irismatrix[,5])
rowcount <- nrow(irismatrix)
set.seed(392) # So sample() always returns the same result (choose your own seed)
# We want an equal number of observations of each species in the training set
# We take advantage of the fact that there are exactly 50 flowers in each species
speciescount <- 50
speciestraincount <- round(speciescount*.8)
trainrows = unlist(map(1:3,function(speciesindex){
speciescount*(speciesindex-1)+
sort(sample(speciescount,speciestraincount))}))
trainset <- irismatrix[trainrows,]
testset <- irismatrix[-trainrows,]
numfeatures <- 4
x_trainset <- trainset[,1:numfeatures]
x_testset <- testset[,1:numfeatures]
pc <- prcomp(x_trainset,center=TRUE,scale.=FALSE,rank.=2)
rotationmatrix <- pc$rotation
traindata <- as.data.frame(pc$x)
# restore species names
speciesNames <- levels(iris$Species)
traindata$y <- speciesNames[trainset[,5]]
# Apply rotation to testset
testdata <- as.data.frame(x_testset %*% rotationmatrix)
testdata$y <- speciesNames[testset[,5]]
alldata <- list(traindata=traindata,testdata=testdata)
alldata
}
alldata <- get2DIrisData()
traindata <- alldata$traindata
testdata <- alldata$testdata
# Convert the outcome variable to a factor
traindata$y <- factor(traindata$y)
testdata$y <- factor(testdata$y)
head(traindata)
svm_rbf_model <- svm_rbf(cost = tune()) %>%
set_mode("classification") %>%
set_engine("kernlab")
set.seed(55) # For repeatability
# Call vfold_cv() on the training set and request 10 folds
iris_folds <- vfold_cv(traindata, v=10)
# Examine the result
iris_folds
# Define a grid for the parameter search space.
# We create our own grid:
# a data frame with a column for each parameter (only one in this case)
costrange <- c(0.5,10)
costspan <- costrange[2]-costrange[1]
n <- 20
paramgrid <- as.data.frame(list(cost=(1:n)/n*costspan+costrange[1]))
# Remove earlier versions of the workflow, if any
rm(svm_wflow,tuned_wflow)
# Set up a workflow
svm_wflow <-
workflow() %>%  # This creates a workflow object
add_model(svm_rbf_model) # Every workflow must have a model
# There is no pre-processing required so the recipe just identifies the outcome variable
iris_recipe <- recipe(y ~ .,data=traindata)
# Add the recipe
svm_wflow <- svm_wflow %>% add_recipe(iris_recipe)
# Run model over the search grid
tuned_wflow <-  tune_grid(svm_wflow,
resamples=iris_folds,
grid=paramgrid)
# The autoplot() function creates a nice ggplot
autoplot(tuned_wflow) + theme(legend.position = "top")
show_best(tuned_wflow,metric = "accuracy")
bestcost <- 3.825
svm_rbf_spec <- svm_rbf(cost =bestcost) %>%
set_mode("classification") %>%
set_engine("kernlab")
iris_wflow <-
workflow() %>%  # This creates a workflow object
add_model(svm_rbf_spec) %>%
add_recipe(iris_recipe)
#
iris_fit <- fit(iris_wflow,traindata)
# The object iris_fit now contains the fitted model
iris_fit
iris_fit_results <- bind_cols(
predict(iris_fit, traindata),
predict(iris_fit, traindata, type = "prob"),
) %>% mutate(y=traindata$y)
iris_fit_results
iriscm <- conf_mat(data=iris_fit_results ,truth=y,estimate=.pred_class)
print(iriscm)
iris_cr <- cr(as.matrix(iriscm$table))
print(iris_cr)
iristest_fit_results <- bind_cols(
predict(iris_fit, testdata),
predict(iris_fit, testdata, type = "prob"),
) %>% mutate(y=testdata$y)
iristestcm <- conf_mat(data=iris_fit_results ,truth=y,estimate=.pred_class)
print(iristestcm)
iristest_cr <- cr(as.matrix(iristestcm$table))
print(iristest_cr)
# Include your libraries here:
library(ggplot2)
library(tidymodels)
library(tidyr)
library(kernlab) # for svm functions
tidymodels_prefer()
source("classification_report.R") # function cr()
get2DIrisData <- function(){
# Get the iris data and project it down to two dimensions (for visualization)
newiris <- iris
# Convert the factor variable to integer
newiris$Species <- as.integer(unclass(newiris$Species))
# Convert the data frame to a matrix
irismatrix <- as.matrix(newiris)
# Remove the dimension names
dimnames(irismatrix) <- NULL
# Scale the data
features <- scale(irismatrix[,1:4])
# Append the labels column
irismatrix <- cbind(features,irismatrix[,5])
rowcount <- nrow(irismatrix)
set.seed(392) # So sample() always returns the same result (choose your own seed)
# We want an equal number of observations of each species in the training set
# We take advantage of the fact that there are exactly 50 flowers in each species
speciescount <- 50
speciestraincount <- round(speciescount*.8)
trainrows = unlist(map(1:3,function(speciesindex){
speciescount*(speciesindex-1)+
sort(sample(speciescount,speciestraincount))}))
trainset <- irismatrix[trainrows,]
testset <- irismatrix[-trainrows,]
numfeatures <- 4
x_trainset <- trainset[,1:numfeatures]
x_testset <- testset[,1:numfeatures]
pc <- prcomp(x_trainset,center=TRUE,scale.=FALSE,rank.=2)
rotationmatrix <- pc$rotation
traindata <- as.data.frame(pc$x)
# restore species names
speciesNames <- levels(iris$Species)
traindata$y <- speciesNames[trainset[,5]]
# Apply rotation to testset
testdata <- as.data.frame(x_testset %*% rotationmatrix)
testdata$y <- speciesNames[testset[,5]]
alldata <- list(traindata=traindata,testdata=testdata)
alldata
}
alldata <- get2DIrisData()
traindata <- alldata$traindata
testdata <- alldata$testdata
# Convert the outcome variable to a factor
traindata$y <- factor(traindata$y)
testdata$y <- factor(testdata$y)
head(traindata)
svm_rbf_model <- svm_rbf(cost = tune()) %>%
set_mode("classification") %>%
set_engine("kernlab")
set.seed(55) # For repeatability
# Call vfold_cv() on the training set and request 10 folds
iris_folds <- vfold_cv(traindata, 10)
# Examine the result
#iris_folds
# Define a grid for the parameter search space.
# We create our own grid:
# a data frame with a column for each parameter (only one in this case)
costrange <- c(0.5,10)
costspan <- costrange[2]-costrange[1]
n <- 20
paramgrid <- as.data.frame(list(cost=(1:n)/n*costspan+costrange[1]))
# Remove earlier versions of the workflow, if any
rm(svm_wflow,tuned_wflow)
# Set up a workflow
svm_wflow <-
workflow() %>%  # This creates a workflow object
add_model(svm_rbf_model) # Every workflow must have a model
# There is no pre-processing required so the recipe just identifies the outcome variable
iris_recipe <- recipe(y ~ .,data=traindata)
# Add the recipe
svm_wflow <- svm_wflow %>% add_recipe(iris_recipe)
# Run model over the search grid
tuned_wflow <-  tune_grid(svm_wflow,
resamples=iris_folds,
grid=paramgrid)
# The autoplot() function creates a nice ggplot
autoplot(tuned_wflow) + theme(legend.position = "top")
show_best(tuned_wflow, "accuracy")
bestcost <- 4.3
svm_rbf_spec <- svm_rbf(cost =bestcost) %>%
set_mode("classification") %>%
set_engine("kernlab")
iris_wflow <-
workflow() %>%  # This creates a workflow object
add_model(svm_rbf_spec) %>%
add_recipe(iris_recipe)
#
iris_fit <- fit(iris_wflow,traindata)
# The object iris_fit now contains the fitted model
iris_fit
iris_fit_results <- bind_cols(
predict(iris_fit, traindata),
predict(iris_fit, traindata, type = "prob"),
) %>% mutate(y=traindata$y)
iriscm <- conf_mat(data=iris_fit_results ,truth=y,estimate=.pred_class)
print(iriscm)
iris_cr <- cr(iriscm$table)
print(iris_cr)
iristest_fit_results <- bind_cols(
predict(iris_fit, testdata),
predict(iris_fit, testdata, type = "prob"),
) %>% mutate(y=testdata$y)
iristestcm <- conf_mat(data=iristest_fit_results ,truth=y,estimate=.pred_class)
print(iristestcm)
iristest_cr <- cr(iristestcm$table)
print(iristest_cr)
# Include your libraries here:
library(ggplot2)
library(tidymodels)
library(tidyr)
library(kernlab) # for svm functions
tidymodels_prefer()
source("classification_report.R") # function cr()
get2DIrisData <- function(){
# Get the iris data and project it down to two dimensions (for visualization)
newiris <- iris
# Convert the factor variable to integer
newiris$Species <- as.integer(unclass(newiris$Species))
# Convert the data frame to a matrix
irismatrix <- as.matrix(newiris)
# Remove the dimension names
dimnames(irismatrix) <- NULL
# Scale the data
features <- scale(irismatrix[,1:4])
# Append the labels column
irismatrix <- cbind(features,irismatrix[,5])
rowcount <- nrow(irismatrix)
set.seed(392) # So sample() always returns the same result (choose your own seed)
# We want an equal number of observations of each species in the training set
# We take advantage of the fact that there are exactly 50 flowers in each species
speciescount <- 50
speciestraincount <- round(speciescount*.8)
trainrows = unlist(map(1:3,function(speciesindex){
speciescount*(speciesindex-1)+
sort(sample(speciescount,speciestraincount))}))
trainset <- irismatrix[trainrows,]
testset <- irismatrix[-trainrows,]
numfeatures <- 4
x_trainset <- trainset[,1:numfeatures]
x_testset <- testset[,1:numfeatures]
pc <- prcomp(x_trainset,center=TRUE,scale.=FALSE,rank.=2)
rotationmatrix <- pc$rotation
traindata <- as.data.frame(pc$x)
# restore species names
speciesNames <- levels(iris$Species)
traindata$y <- speciesNames[trainset[,5]]
# Apply rotation to testset
testdata <- as.data.frame(x_testset %*% rotationmatrix)
testdata$y <- speciesNames[testset[,5]]
alldata <- list(traindata=traindata,testdata=testdata)
alldata
}
alldata <- get2DIrisData()
traindata <- alldata$traindata
testdata <- alldata$testdata
# Convert the outcome variable to a factor
traindata$y <- factor(traindata$y)
testdata$y <- factor(testdata$y)
head(traindata)
svm_rbf_model <- svm_rbf(cost = tune()) %>%
set_mode("classification") %>%
set_engine("kernlab")
set.seed(55) # For repeatability
# Call vfold_cv() on the training set and request 10 folds
iris_folds <- vfold_cv(traindata, v=10)
# Examine the result
iris_folds
# Define a grid for the parameter search space.
# We create our own grid:
# a data frame with a column for each parameter (only one in this case)
costrange <- c(0.5,10)
costspan <- costrange[2]-costrange[1]
n <- 20
paramgrid <- as.data.frame(list(cost=(1:n)/n*costspan+costrange[1]))
# Remove earlier versions of the workflow, if any
rm(svm_wflow,tuned_wflow)
# Set up a workflow
svm_wflow <-
workflow() %>%  # This creates a workflow object
add_model(svm_rbf_model) # Every workflow must have a model
# There is no pre-processing required so the recipe just identifies the outcome variable
iris_recipe <- recipe(y ~ .,data=traindata)
# Add the recipe
svm_wflow <- svm_wflow %>% add_recipe(iris_recipe)
# Run model over the search grid
tuned_wflow <-  tune_grid(svm_wflow,
resamples=iris_folds,
grid=paramgrid)
# The autoplot() function creates a nice ggplot
autoplot(tuned_wflow) + theme(legend.position = "top")
show_best(tuned_wflow,metric = "accuracy")
bestcost <- 3.825
svm_rbf_spec <- svm_rbf(cost =bestcost) %>%
set_mode("classification") %>%
set_engine("kernlab")
iris_wflow <-
workflow() %>%  # This creates a workflow object
add_model(svm_rbf_spec) %>%
add_recipe(iris_recipe)
#
iris_fit <- fit(iris_wflow,traindata)
# The object iris_fit now contains the fitted model
iris_fit
iris_fit_results <- bind_cols(
predict(iris_fit, traindata),
predict(iris_fit, traindata, type = "prob"),
) %>% mutate(y=traindata$y)
iris_fit_results
iriscm <- conf_mat(data=iris_fit_results ,truth=y,estimate=.pred_class)
print(iriscm)
iris_cr <- cr(as.matrix(iriscm$table))
print(iris_cr)
iristest_fit_results <- bind_cols(
predict(iris_fit, testdata),
predict(iris_fit, testdata, type = "prob"),
) %>% mutate(y=testdata$y)
iristestcm <- conf_mat(data=iristest_fit_results ,truth=y,estimate=.pred_class)
print(iristestcm)
iristest_cr <- cr(as.matrix(iristestcm$table))
print(iristest_cr)
