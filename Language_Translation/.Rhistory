text <- c()
if(predict == TRUE){
logits <- logits - 1 ## For prediction conversion only
}
for(i in logits){
if(i == 0){
text <- c(text, "<PAD>")
}else{
text <- c(text, tokenizer_words[i])
}
}
return(text)
}
# Testing to convert the first row back to text
# preprocess_x[[1]][1, ]
# preprocess_x[[1]]
logits_to_text(preprocess_x[[1]][1, ], x_tk)
=======
calculate_sparsity(tmp_x)
# Include your libraries here:
library(ggplot2)
library(tidymodels)
library(tidyr)
library(kernlab) # for svm functions
tidymodels_prefer()
source("classification_report.R") # function cr()
get2DIrisData <- function(){
# Get the iris data and project it down to two dimensions (for visualization)
newiris <- iris
# Convert the factor variable to integer
newiris$Species <- as.integer(unclass(newiris$Species))
# Convert the data frame to a matrix
irismatrix <- as.matrix(newiris)
# Remove the dimension names
dimnames(irismatrix) <- NULL
# Scale the data
features <- scale(irismatrix[,1:4])
# Append the labels column
irismatrix <- cbind(features,irismatrix[,5])
rowcount <- nrow(irismatrix)
set.seed(392) # So sample() always returns the same result (choose your own seed)
# We want an equal number of observations of each species in the training set
# We take advantage of the fact that there are exactly 50 flowers in each species
speciescount <- 50
speciestraincount <- round(speciescount*.8)
trainrows = unlist(map(1:3,function(speciesindex){
speciescount*(speciesindex-1)+
sort(sample(speciescount,speciestraincount))}))
trainset <- irismatrix[trainrows,]
testset <- irismatrix[-trainrows,]
numfeatures <- 4
x_trainset <- trainset[,1:numfeatures]
x_testset <- testset[,1:numfeatures]
pc <- prcomp(x_trainset,center=TRUE,scale.=FALSE,rank.=2)
rotationmatrix <- pc$rotation
traindata <- as.data.frame(pc$x)
# restore species names
speciesNames <- levels(iris$Species)
traindata$y <- speciesNames[trainset[,5]]
# Apply rotation to testset
testdata <- as.data.frame(x_testset %*% rotationmatrix)
testdata$y <- speciesNames[testset[,5]]
alldata <- list(traindata=traindata,testdata=testdata)
alldata
}
alldata <- get2DIrisData()
traindata <- alldata$traindata
testdata <- alldata$testdata
# Convert the outcome variable to a factor
traindata$y <- factor(traindata$y)
testdata$y <- factor(testdata$y)
head(traindata)
svm_rbf_model <- svm_rbf(cost = tune()) %>%
set_mode("classification") %>%
set_engine("kernlab")
set.seed(55) # For repeatability
# Call vfold_cv() on the training set and request 10 folds
iris_folds <- vfold_cv(traindata, 10)
# Examine the result
#iris_folds
# Define a grid for the parameter search space.
# We create our own grid:
# a data frame with a column for each parameter (only one in this case)
costrange <- c(0.5,10)
costspan <- costrange[2]-costrange[1]
n <- 20
paramgrid <- as.data.frame(list(cost=(1:n)/n*costspan+costrange[1]))
# Remove earlier versions of the workflow, if any
rm(svm_wflow,tuned_wflow)
# Set up a workflow
svm_wflow <-
workflow() %>%  # This creates a workflow object
add_model(svm_rbf_model) # Every workflow must have a model
# There is no pre-processing required so the recipe just identifies the outcome variable
iris_recipe <- recipe(y ~ .,data=traindata)
# Add the recipe
svm_wflow <- svm_wflow %>% add_recipe(iris_recipe)
# Run model over the search grid
tuned_wflow <-  tune_grid(svm_wflow,
resamples=iris_folds,
grid=paramgrid)
# The autoplot() function creates a nice ggplot
autoplot(tuned_wflow) + theme(legend.position = "top")
# Include your libraries here:
library(ggplot2)
library(tidymodels)
library(tidyr)
library(kernlab) # for svm functions
tidymodels_prefer()
source("classification_report.R") # function cr()
get2DIrisData <- function(){
# Get the iris data and project it down to two dimensions (for visualization)
newiris <- iris
# Convert the factor variable to integer
newiris$Species <- as.integer(unclass(newiris$Species))
# Convert the data frame to a matrix
irismatrix <- as.matrix(newiris)
# Remove the dimension names
dimnames(irismatrix) <- NULL
# Scale the data
features <- scale(irismatrix[,1:4])
# Append the labels column
irismatrix <- cbind(features,irismatrix[,5])
rowcount <- nrow(irismatrix)
set.seed(392) # So sample() always returns the same result (choose your own seed)
# We want an equal number of observations of each species in the training set
# We take advantage of the fact that there are exactly 50 flowers in each species
speciescount <- 50
speciestraincount <- round(speciescount*.8)
trainrows = unlist(map(1:3,function(speciesindex){
speciescount*(speciesindex-1)+
sort(sample(speciescount,speciestraincount))}))
trainset <- irismatrix[trainrows,]
testset <- irismatrix[-trainrows,]
numfeatures <- 4
x_trainset <- trainset[,1:numfeatures]
x_testset <- testset[,1:numfeatures]
pc <- prcomp(x_trainset,center=TRUE,scale.=FALSE,rank.=2)
rotationmatrix <- pc$rotation
traindata <- as.data.frame(pc$x)
# restore species names
speciesNames <- levels(iris$Species)
traindata$y <- speciesNames[trainset[,5]]
# Apply rotation to testset
testdata <- as.data.frame(x_testset %*% rotationmatrix)
testdata$y <- speciesNames[testset[,5]]
alldata <- list(traindata=traindata,testdata=testdata)
alldata
}
alldata <- get2DIrisData()
traindata <- alldata$traindata
testdata <- alldata$testdata
# Convert the outcome variable to a factor
traindata$y <- factor(traindata$y)
testdata$y <- factor(testdata$y)
head(traindata)
svm_rbf_model <- svm_rbf(cost = tune()) %>%
set_mode("classification") %>%
set_engine("kernlab")
set.seed(55) # For repeatability
# Call vfold_cv() on the training set and request 10 folds
iris_folds <- vfold_cv(traindata, v=10)
# Examine the result
iris_folds
# Define a grid for the parameter search space.
# We create our own grid:
# a data frame with a column for each parameter (only one in this case)
costrange <- c(0.5,10)
costspan <- costrange[2]-costrange[1]
n <- 20
paramgrid <- as.data.frame(list(cost=(1:n)/n*costspan+costrange[1]))
# Remove earlier versions of the workflow, if any
rm(svm_wflow,tuned_wflow)
# Set up a workflow
svm_wflow <-
workflow() %>%  # This creates a workflow object
add_model(svm_rbf_model) # Every workflow must have a model
# There is no pre-processing required so the recipe just identifies the outcome variable
iris_recipe <- recipe(y ~ .,data=traindata)
# Add the recipe
svm_wflow <- svm_wflow %>% add_recipe(iris_recipe)
# Run model over the search grid
tuned_wflow <-  tune_grid(svm_wflow,
resamples=iris_folds,
grid=paramgrid)
# The autoplot() function creates a nice ggplot
autoplot(tuned_wflow) + theme(legend.position = "top")
show_best(tuned_wflow,metric = "accuracy")
bestcost <- 3.825
svm_rbf_spec <- svm_rbf(cost =bestcost) %>%
set_mode("classification") %>%
set_engine("kernlab")
iris_wflow <-
workflow() %>%  # This creates a workflow object
add_model(svm_rbf_spec) %>%
add_recipe(iris_recipe)
#
iris_fit <- fit(iris_wflow,traindata)
# The object iris_fit now contains the fitted model
iris_fit
iris_fit_results <- bind_cols(
predict(iris_fit, traindata),
predict(iris_fit, traindata, type = "prob"),
) %>% mutate(y=traindata$y)
iris_fit_results
iriscm <- conf_mat(data=iris_fit_results ,truth=y,estimate=.pred_class)
print(iriscm)
iris_cr <- cr(as.matrix(iriscm$table))
print(iris_cr)
iristest_fit_results <- bind_cols(
predict(iris_fit, testdata),
predict(iris_fit, testdata, type = "prob"),
) %>% mutate(y=testdata$y)
iristestcm <- conf_mat(data=iris_fit_results ,truth=y,estimate=.pred_class)
print(iristestcm)
iristest_cr <- cr(as.matrix(iristestcm$table))
print(iristest_cr)
# Include your libraries here:
library(ggplot2)
library(tidymodels)
library(tidyr)
library(kernlab) # for svm functions
tidymodels_prefer()
source("classification_report.R") # function cr()
get2DIrisData <- function(){
# Get the iris data and project it down to two dimensions (for visualization)
newiris <- iris
# Convert the factor variable to integer
newiris$Species <- as.integer(unclass(newiris$Species))
# Convert the data frame to a matrix
irismatrix <- as.matrix(newiris)
# Remove the dimension names
dimnames(irismatrix) <- NULL
# Scale the data
features <- scale(irismatrix[,1:4])
# Append the labels column
irismatrix <- cbind(features,irismatrix[,5])
rowcount <- nrow(irismatrix)
set.seed(392) # So sample() always returns the same result (choose your own seed)
# We want an equal number of observations of each species in the training set
# We take advantage of the fact that there are exactly 50 flowers in each species
speciescount <- 50
speciestraincount <- round(speciescount*.8)
trainrows = unlist(map(1:3,function(speciesindex){
speciescount*(speciesindex-1)+
sort(sample(speciescount,speciestraincount))}))
trainset <- irismatrix[trainrows,]
testset <- irismatrix[-trainrows,]
numfeatures <- 4
x_trainset <- trainset[,1:numfeatures]
x_testset <- testset[,1:numfeatures]
pc <- prcomp(x_trainset,center=TRUE,scale.=FALSE,rank.=2)
rotationmatrix <- pc$rotation
traindata <- as.data.frame(pc$x)
# restore species names
speciesNames <- levels(iris$Species)
traindata$y <- speciesNames[trainset[,5]]
# Apply rotation to testset
testdata <- as.data.frame(x_testset %*% rotationmatrix)
testdata$y <- speciesNames[testset[,5]]
alldata <- list(traindata=traindata,testdata=testdata)
alldata
}
alldata <- get2DIrisData()
traindata <- alldata$traindata
testdata <- alldata$testdata
# Convert the outcome variable to a factor
traindata$y <- factor(traindata$y)
testdata$y <- factor(testdata$y)
head(traindata)
svm_rbf_model <- svm_rbf(cost = tune()) %>%
set_mode("classification") %>%
set_engine("kernlab")
set.seed(55) # For repeatability
# Call vfold_cv() on the training set and request 10 folds
iris_folds <- vfold_cv(traindata, 10)
# Examine the result
#iris_folds
# Define a grid for the parameter search space.
# We create our own grid:
# a data frame with a column for each parameter (only one in this case)
costrange <- c(0.5,10)
costspan <- costrange[2]-costrange[1]
n <- 20
paramgrid <- as.data.frame(list(cost=(1:n)/n*costspan+costrange[1]))
# Remove earlier versions of the workflow, if any
rm(svm_wflow,tuned_wflow)
# Set up a workflow
svm_wflow <-
workflow() %>%  # This creates a workflow object
add_model(svm_rbf_model) # Every workflow must have a model
# There is no pre-processing required so the recipe just identifies the outcome variable
iris_recipe <- recipe(y ~ .,data=traindata)
# Add the recipe
svm_wflow <- svm_wflow %>% add_recipe(iris_recipe)
# Run model over the search grid
tuned_wflow <-  tune_grid(svm_wflow,
resamples=iris_folds,
grid=paramgrid)
# The autoplot() function creates a nice ggplot
autoplot(tuned_wflow) + theme(legend.position = "top")
show_best(tuned_wflow, "accuracy")
bestcost <- 4.3
svm_rbf_spec <- svm_rbf(cost =bestcost) %>%
set_mode("classification") %>%
set_engine("kernlab")
iris_wflow <-
workflow() %>%  # This creates a workflow object
add_model(svm_rbf_spec) %>%
add_recipe(iris_recipe)
#
iris_fit <- fit(iris_wflow,traindata)
# The object iris_fit now contains the fitted model
iris_fit
iris_fit_results <- bind_cols(
predict(iris_fit, traindata),
predict(iris_fit, traindata, type = "prob"),
) %>% mutate(y=traindata$y)
iriscm <- conf_mat(data=iris_fit_results ,truth=y,estimate=.pred_class)
print(iriscm)
iris_cr <- cr(iriscm$table)
print(iris_cr)
iristest_fit_results <- bind_cols(
predict(iris_fit, testdata),
predict(iris_fit, testdata, type = "prob"),
) %>% mutate(y=testdata$y)
iristestcm <- conf_mat(data=iristest_fit_results ,truth=y,estimate=.pred_class)
print(iristestcm)
iristest_cr <- cr(iristestcm$table)
print(iristest_cr)
# Include your libraries here:
library(ggplot2)
library(tidymodels)
library(tidyr)
library(kernlab) # for svm functions
tidymodels_prefer()
source("classification_report.R") # function cr()
get2DIrisData <- function(){
# Get the iris data and project it down to two dimensions (for visualization)
newiris <- iris
# Convert the factor variable to integer
newiris$Species <- as.integer(unclass(newiris$Species))
# Convert the data frame to a matrix
irismatrix <- as.matrix(newiris)
# Remove the dimension names
dimnames(irismatrix) <- NULL
# Scale the data
features <- scale(irismatrix[,1:4])
# Append the labels column
irismatrix <- cbind(features,irismatrix[,5])
rowcount <- nrow(irismatrix)
set.seed(392) # So sample() always returns the same result (choose your own seed)
# We want an equal number of observations of each species in the training set
# We take advantage of the fact that there are exactly 50 flowers in each species
speciescount <- 50
speciestraincount <- round(speciescount*.8)
trainrows = unlist(map(1:3,function(speciesindex){
speciescount*(speciesindex-1)+
sort(sample(speciescount,speciestraincount))}))
trainset <- irismatrix[trainrows,]
testset <- irismatrix[-trainrows,]
numfeatures <- 4
x_trainset <- trainset[,1:numfeatures]
x_testset <- testset[,1:numfeatures]
pc <- prcomp(x_trainset,center=TRUE,scale.=FALSE,rank.=2)
rotationmatrix <- pc$rotation
traindata <- as.data.frame(pc$x)
# restore species names
speciesNames <- levels(iris$Species)
traindata$y <- speciesNames[trainset[,5]]
# Apply rotation to testset
testdata <- as.data.frame(x_testset %*% rotationmatrix)
testdata$y <- speciesNames[testset[,5]]
alldata <- list(traindata=traindata,testdata=testdata)
alldata
}
alldata <- get2DIrisData()
traindata <- alldata$traindata
testdata <- alldata$testdata
# Convert the outcome variable to a factor
traindata$y <- factor(traindata$y)
testdata$y <- factor(testdata$y)
head(traindata)
svm_rbf_model <- svm_rbf(cost = tune()) %>%
set_mode("classification") %>%
set_engine("kernlab")
set.seed(55) # For repeatability
# Call vfold_cv() on the training set and request 10 folds
iris_folds <- vfold_cv(traindata, v=10)
# Examine the result
iris_folds
# Define a grid for the parameter search space.
# We create our own grid:
# a data frame with a column for each parameter (only one in this case)
costrange <- c(0.5,10)
costspan <- costrange[2]-costrange[1]
n <- 20
paramgrid <- as.data.frame(list(cost=(1:n)/n*costspan+costrange[1]))
# Remove earlier versions of the workflow, if any
rm(svm_wflow,tuned_wflow)
# Set up a workflow
svm_wflow <-
workflow() %>%  # This creates a workflow object
add_model(svm_rbf_model) # Every workflow must have a model
# There is no pre-processing required so the recipe just identifies the outcome variable
iris_recipe <- recipe(y ~ .,data=traindata)
# Add the recipe
svm_wflow <- svm_wflow %>% add_recipe(iris_recipe)
# Run model over the search grid
tuned_wflow <-  tune_grid(svm_wflow,
resamples=iris_folds,
grid=paramgrid)
# The autoplot() function creates a nice ggplot
autoplot(tuned_wflow) + theme(legend.position = "top")
show_best(tuned_wflow,metric = "accuracy")
bestcost <- 3.825
svm_rbf_spec <- svm_rbf(cost =bestcost) %>%
set_mode("classification") %>%
set_engine("kernlab")
iris_wflow <-
workflow() %>%  # This creates a workflow object
add_model(svm_rbf_spec) %>%
add_recipe(iris_recipe)
#
iris_fit <- fit(iris_wflow,traindata)
# The object iris_fit now contains the fitted model
iris_fit
iris_fit_results <- bind_cols(
predict(iris_fit, traindata),
predict(iris_fit, traindata, type = "prob"),
) %>% mutate(y=traindata$y)
iris_fit_results
iriscm <- conf_mat(data=iris_fit_results ,truth=y,estimate=.pred_class)
print(iriscm)
iris_cr <- cr(as.matrix(iriscm$table))
print(iris_cr)
iristest_fit_results <- bind_cols(
predict(iris_fit, testdata),
predict(iris_fit, testdata, type = "prob"),
) %>% mutate(y=testdata$y)
iristestcm <- conf_mat(data=iristest_fit_results ,truth=y,estimate=.pred_class)
print(iristestcm)
iristest_cr <- cr(as.matrix(iristestcm$table))
print(iristest_cr)
pred_translation <- function(i){
predict_output <- model_RNN %>% predict(matrix(tensor_x[i, ,], nrow=1))
predict_output <- argmax(predict_output, FALSE)
converted_text <- logits_to_text(predict_output, y_tk, predict = TRUE)
converted_text[converted_text == "<PAD>"] <- ""
converted_text <- trimws(paste(converted_text, collapse = " "))
print(paste("Input sentence:", train_x[i]))
print(paste("Intended Output Sentence:", train_y[i]))
print(paste("Predicted Output Sentence:", converted_text))
}
## `i` represents the index within the training set.
pred_translation(5)
>>>>>>> Stashed changes
library(keras)
library(tensorflow)
library(tokenizers)
library(dplyr)
library(reticulate)
library(ramify)
library(stringr)
library(deepviz)
language <- "French"
language_code <- "fr"
file_name <- paste0("translation_", language_code, ".csv")
train <- read.csv(file_name, encoding="UTF-8", stringsAsFactors=FALSE)
colnames(train) <- c("English", language)
train
tokenize <- function(x){
tokenizer <- text_tokenizer(num_words = 1000000)
fit_text_tokenizer(tokenizer, x)
sequences <- texts_to_sequences(tokenizer, x)
return(c(sequences, tokenizer))
}
pad <- function(x, length=NULL){
return(pad_sequences(x, maxlen = length, padding = 'post'))
}
text_sentences = c('The quick brown fox jumps over the lazy dog .',
'By Jove , my quick study of lexicography won a prize .',
'This is a short sentence .')
token_index <- length(text_sentences) + 1
output <- tokenize(text_sentences)
library(keras)
library(tensorflow)
library(tokenizers)
library(dplyr)
library(reticulate)
library(ramify)
library(stringr)
library(deepviz)
language <- "French"
language_code <- "fr"
file_name <- paste0("translation_", language_code, ".csv")
train <- read.csv(file_name, encoding="UTF-8", stringsAsFactors=FALSE)
colnames(train) <- c("English", language)
tokenize <- function(x){
tokenizer <- text_tokenizer(num_words = 1000000)
fit_text_tokenizer(tokenizer, x)
sequences <- texts_to_sequences(tokenizer, x)
return(c(sequences, tokenizer))
}
pad <- function(x, length=NULL){
return(pad_sequences(x, maxlen = length, padding = 'post'))
}
text_sentences = c('The quick brown fox jumps over the lazy dog .',
'By Jove , my quick study of lexicography won a prize .',
'This is a short sentence .')
token_index <- length(text_sentences) + 1
output <- tokenize(text_sentences)
